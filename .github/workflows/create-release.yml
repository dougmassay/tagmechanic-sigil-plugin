on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/Qt
          key: ${{ runner.os }}-qttools-${{ hashFiles('**/reset-caches.txt') }}
    
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.9.5'
          dir: ${{runner.workspace}}/Qt
          setup-python: 'false'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pipcache-${{ hashFiles('**/reset-caches.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          which lrelease
          flake8 buildplugin
          flake8 .
      - name: Build Plugin
        run: python buildplugin --language

      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=TAGNAME::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: TagMechanic ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./TagMechanic_${{ steps.get_tag_name.outputs.TAGNAME }}.zip
          asset_name: TagMechanic_${{ steps.get_tag_name.outputs.TAGNAME }}.zip
          asset_content_type: application/zip